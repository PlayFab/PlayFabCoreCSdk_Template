#pragma once

#include "TestCase.h"
#include <playfab/PFGlobal.h>
#include <playfab/PFEntity.h>
#include <playfab/cpp/<%- globalPrefix %><%- featureGroup.name %>DataModelWrappers.h>
#include "AutoGen<%- featureGroup.name %>ResultHolders.h"

namespace PlayFabUnit
{

class AutoGen<%- featureGroup.name %>Tests : public PlayFabApiTestCase
{
private: 
    static void Log(std::stringstream& ss);
    static HRESULT LogHR(HRESULT hr);

<% for (var i = 0; i < featureGroup.calls.length; i++) 
{
    var call = featureGroup.calls[i];

    for (var j = 0; j < prerequisiteCalls[call.name].length; j++)
    {
        var prereqCall = prerequisiteCalls[call.name][j];
    %><%- callExclusionMacroBegin(call) %>    void Test<%- featureGroup.name + call.name %>Prerequisite<%- prereqCall.name %>(TestContext& testContext);
<%- callExclusionMacroEnd(call) %><%
    }

    var asyncName = prefix + call.name + "Async"; 
%><%- callExclusionMacroBegin(call) %>    void Test<%- featureGroup.name + call.name %>(TestContext& testContext);
<%- callExclusionMacroEnd(call) %><%

    for (var j = 0; j < cleanupCalls[call.name].length; j++)
    {
        var cleanupCall = cleanupCalls[call.name][j];
    %><%- callExclusionMacroBegin(call) %>    void Test<%- featureGroup.name + call.name %>Cleanup<%- cleanupCall.name %>(TestContext& testContext);
<%- callExclusionMacroEnd(call) %><%
    }
%>
<%
} // end for %>
protected:
    void AddTests();
<% 
var hasLogRequestBeenDefinedMap = {};
var hasLogResponseBeenDefinedMap = {};
var storedResponseTypes = [];
for (var i = 0; i < featureGroup.calls.length; i++)
{
    var call = featureGroup.calls[i];

    if (call.requestDatatype && !(call.requestDatatype.name in hasLogRequestBeenDefinedMap) ) {
        hasLogRequestBeenDefinedMap[call.requestDatatype.name] = true; %>
    static void Log<%- call.requestDatatype.name %>(<%- call.requestDatatype.prefix + call.requestDatatype.name %> const* request, const char* testName);<%
    } // end if
    if (call.resultDatatype && !(call.resultDatatype.name in hasLogResponseBeenDefinedMap) ) { 
        hasLogResponseBeenDefinedMap[call.resultDatatype.name] = true; %>
    static HRESULT Log<%- call.resultDatatype.name %>(<%- call.resultDatatype.prefix + call.resultDatatype.name %> const* result);<%
    } // end if
}%>
<%

for (var i = 0; i < featureGroup.calls.length; i++) 
{
    var call = featureGroup.calls[i];

    for (var j = 0; j < prerequisiteCalls[call.name].length; j++)
    {
        var prereqCall = prerequisiteCalls[call.name][j];
        
        if (prereqCall.requestDatatype) {%>
    static void Fill<%- call.name %>Prerequisite<%- prereqCall.name %>Request(PlayFab::Wrappers::<%- prereqCall.requestDatatype.prefix + prereqCall.requestDatatype.name %>Wrapper<>& request);<%
        } // end if 
        if (prereqCall.resultDatatype) {
            if (!(storedResponseTypes.some(elem => elem.name === prereqCall.resultDatatype.name)))
            {
                 storedResponseTypes.push(prereqCall.resultDatatype);
            } %>
    static HRESULT Store<%- call.name %>Prerequisite<%- prereqCall.name %>Response(std::shared_ptr<<%- prereqCall.resultDatatype.name %>Holder> result);<%
        } // end if
    } // end for

    if (call.requestDatatype) {%>
    static void Fill<%- call.name %>Request(PlayFab::Wrappers::<%- call.requestDatatype.prefix + call.requestDatatype.name %>Wrapper<>& request);<%
    } // end if
    if (call.resultDatatype) {%>
    static HRESULT Validate<%- call.name %>Response(<%- call.resultDatatype.prefix + call.resultDatatype.name %>* result);<%
    } // end if

    for (var j = 0; j < cleanupCalls[call.name].length; j++)
    {
        var cleanupCall = cleanupCalls[call.name][j];
        
        if (cleanupCall.requestDatatype) {%>
    static void Fill<%- call.name %>Cleanup<%- cleanupCall.name %>Request(PlayFab::Wrappers::<%- cleanupCall.requestDatatype.prefix + cleanupCall.requestDatatype.name %>Wrapper<>& request);<%
        } // end if 
        if (cleanupCall.resultDatatype) { 
            if (!(storedResponseTypes.some(elem => elem.name === cleanupCall.resultDatatype.name)))
            {
                 storedResponseTypes.push(cleanupCall.resultDatatype);
            }%>
    static HRESULT Store<%- call.name %>Cleanup<%- cleanupCall.name %>Response(std::shared_ptr<<%- cleanupCall.resultDatatype.name %>Holder> result);<%
        } // end if
    } // end for %>
<% } // end for %>
    struct <%- featureGroup.name %>TestData
    {
        ~<%- featureGroup.name %>TestData() = default;
<% for (const responseType of storedResponseTypes) { %>
        std::shared_ptr<<%- responseType.name %>Holder> m_<%- responseType.name %>;<%
} // end for %>
    };

    static <%- featureGroup.name %>TestData testData;

public:
    PFStateHandle stateHandle{ nullptr };
    PFTitlePlayerHandle titlePlayerHandle{ nullptr };
    PFEntityHandle entityHandle{ nullptr };
    PFTitlePlayerHandle titlePlayerHandle2{ nullptr };
    PFEntityHandle entityHandle2{ nullptr };
    PFEntityHandle titleEntityHandle{ nullptr };

    void ClassSetUp() override;
    void ClassTearDown() override;
    void SetUp(TestContext& testContext) override;

    void Tick(TestContext&) override {}
};

}
