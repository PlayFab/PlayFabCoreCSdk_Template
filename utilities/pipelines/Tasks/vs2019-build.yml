parameters:
  - name: platform
    type: string
  - name: configuration
    type: string
  - name: prefast
    type: string

steps:
  - template: checkout.yml

  - task: PkgESSetupBuild@12
    displayName: PkgES build setup
    inputs:
      useDfs: false
      productName: PFCoreCSDK
      branchVersion: true
      extSync: true
      disableMsbuildVersion: true

  - task: BatchScript@1
    displayName: fetchTools.cmd
    inputs:
      filename: Utilities/Pipelines/Scripts/fetchTools.cmd
      arguments: '"$(PAT)"'
      modifyEnvironment: false

  - task: BatchScript@1
    displayName: preCompileScript.cmd
    inputs:
      filename: Utilities/Pipelines/Scripts/preCompileScript.cmd
      modifyEnvironment: false

  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet 5.8'
    inputs:
      versionSpec: 5.8

  - task: BatchScript@1
    displayName: vsvars.cmd
    inputs:
      filename: Utilities/Pipelines/Scripts/vsvars.cmd
      modifyEnvironment: true
      
  - task: NuGetAuthenticate@0

  # Install NuGet dependencies. The GUID below is the NuGetCommand for MSFT internal.
  # Refs:
  # - https://developercommunity.visualstudio.com/t/vsts-yaml-build-failure-the-task-name-nugetcommand/288534
  # - https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/package/nuget
  - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
    displayName: NuGet restore
    inputs:
      solution: "build/Win32/PlayFabCore.Win32.sln"

  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk'
    inputs:
      packageType: sdk
      version: 3.1.411
      installationPath: $(Agent.ToolsDirectory)/dotnet

  # Build the Visual Studio 19 solution.
  # Ref: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/visual-studio-build
  - task: VSBuild@1
    displayName: Build ${{ parameters.platform }}+${{ parameters.configuration }} Solution
    inputs:
      solution: build/Win32/PlayFabCore.Win32.sln
      vsVersion: 16.0
      msbuildArchitecture: x64
      platform: ${{ parameters.platform }}
      configuration: ${{ parameters.configuration }}
      createLogFile: true
      logProjectEvents: true
      logFileVerbosity: 'diagnostic'
      
  - task: BatchScript@1
    displayName: preScan.cmd
    inputs:
      filename: Utilities/Pipelines/Scripts/preScan.cmd
      modifyEnvironment: false

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: Component Detection
    
  # PREfast. See https://www.1eswiki.com/wiki/SDL_Native_Rules_Build_Task 
  - ${{ if eq(parameters.prefast, 'Enabled') }}:
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-prefast.SDLNativeRules@2
      displayName: 'Run the PREfast SDL Native Rules for MSBuild'
      condition: succeededOrFailed()

  # Copies output from PREfast SDL Native Rules task to expected location for consumption by PkgESSecComp
  - ${{ if eq(parameters.prefast, 'Enabled') }}:
    - task: CopyFiles@1
      displayName: 'Copy PREfast xml files to SDLNativeRulesDir'
      inputs:
        SourceFolder: '$(Agent.BuildDirectory)'
        Contents: |
          **\*.nativecodeanalysis.xml
        TargetFolder: '$(Agent.BuildDirectory)\_sdt\logs\SDLNativeRules'

  # Security and compliance, failure here should fail the build
  - task: PkgESSecComp@10
    displayName: 'Security and Compliance tasks'
    inputs:
      fileNewBugs: false
      taskLogVerbosity: Diagnostic
      scanAll: true
      failOnStdErr: true
      dropOverride: $(Build.ArtifactStagingDirectory)
      secCompConfigFromTask: |
        tools:
          - toolName: CheckCFlags
            enable: true
          - toolName: CFGCheck
            enable: false
          - toolName: Policheck
            enable: true
          - toolName: XFGCheck
            enable: true
          - toolName: CredScan
            enable: true
      binVersion: 'PreProduction'
      
  - task: BatchScript@1
    displayName: collectLogs.cmd
    inputs:
      filename: Utilities/Pipelines/Scripts/collectLogs.cmd
      arguments: 'build\Win32'
      modifyEnvironment: false
    condition: always() 

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Pipeline Artifact - Logs'
    inputs:
      targetPath: '$(Pipeline.Workspace)\b\Logs'
      artifact: 'PFCoreC_VS2019_Logs_${{ parameters.platform }}_${{ parameters.configuration }}'
    condition: always() 
