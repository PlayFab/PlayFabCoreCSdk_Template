#include "stdafx.h"
#include <playfab/core/PF<%- featureGroup.name %>.h>
#include "<%- featureGroup.name %>/<%- featureGroup.name %>.h"
#include "ApiXAsyncProvider.h"<%
if (featureGroup.name === "Authentication") {%>
#include "AuthXAsyncProvider.h"<%
} %>
#include "GlobalState.h"
#include "Entity.h"

using namespace PlayFab;
using namespace PlayFab::<%- featureGroup.name %>;
<% var apiMemberName = featureGroup.name.charAt(0).toLowerCase() + featureGroup.name.slice(1) + "API";

for (var i = 0; i < featureGroup.calls.length; i++) {
    var call = featureGroup.calls[i]; 
    if (call.isInternalOnly) {
        continue;
    }
    var contextHandleParam = globalPrefix + "ServiceConfigHandle contextHandle";
    var contextBinder = "std::move(serviceConfig)";
    if (call.entityRequired) {
        continue; // only defining auth calls for now
        if (call.entityRequired === "TitlePlayer") {
            contextHandleParam = globalPrefix + "TitlePlayerHandle contextHandle";
            contextBinder = "contextHandle->titlePlayer";
        } else {
            contextHandleParam = globalPrefix + "EntityHandle contextHandle";
            contextBinder = "contextHandle->entity";
        }
    }
    var requestParam = call.requestDatatype ? "_In_ const " + call.requestDatatype.prefix + call.requestDatatype.name + "* request,\n    " : "";
    var makeProvider = call.entityReturned ? "MakeAuthProvider" : "MakeProvider";
    var requestBinder = call.requestDatatype ? "*request, " : ""; %>
PF_API <%- prefix %><%- call.name %>Async(
    _In_ <%- contextHandleParam %>,
    <%- requestParam %>_In_ XAsyncBlock* async
) noexcept
{
    RETURN_HR_INVALIDARG_IF_NULL(contextHandle);<%
    if (call.requestDatatype) { %>
    RETURN_HR_INVALIDARG_IF_NULL(request);<%
    } %>

    SharedPtr<GlobalState> state{ nullptr };
    RETURN_IF_FAILED(GlobalState::Get(state));

    SharedPtr<ServiceConfig> serviceConfig;
    RETURN_IF_FAILED(state->ServiceConfigs().FromHandle(contextHandle, serviceConfig));

    auto provider = <%- makeProvider %>(std::move(state), async, __FUNCTION__, std::bind(&<%- featureGroup.name %>API::<%- call.name %>, std::placeholders::_1, <%- contextBinder %>, <%- requestBinder%>std::placeholders::_2));
    return XAsyncProviderBase::Run(std::move(provider));
}
<%  
    if (!call.resultDatatype) { 
        // No Get Result method needed
    } else if (call.entityReturned) {
        /* Custom logic for all other calls that result in an Entity object*/ %>
PF_API <%- prefix %><%- call.name %>GetResult(
    _In_ XAsyncBlock* async,
    _Out_ <%- globalPrefix %><%- call.entityReturned %>Handle* entityHandle
) noexcept
{
    return XAsyncGetResult(async, nullptr, sizeof(<%- globalPrefix %><%- call.entityReturned %>Handle), entityHandle, nullptr);
}
<%  } else if (isFixedSize(call.resultDatatype)) { %>
PF_API <%- prefix %><%- call.name %>GetResult(
    _In_ XAsyncBlock* async,
    _Out_ <%- call.resultDatatype.prefix %><%- call.resultDatatype.name %>* result
) noexcept
{
    return XAsyncGetResult(async, nullptr, sizeof(<%- call.resultDatatype.prefix %><%- call.resultDatatype.name %>), result, nullptr);
}
<%  } else { %>
PF_API <%- prefix %><%- call.name %>GetResultSize(
    _In_ XAsyncBlock* async,
    _Out_ size_t* bufferSize
) noexcept
{
    return XAsyncGetResultSize(async, bufferSize);
}

PF_API <%- prefix %><%- call.name %>GetResult(
    _In_ XAsyncBlock* async,
    _In_ size_t bufferSize,
    _Out_writes_bytes_to_(bufferSize, *bufferUsed) void* buffer,
    _Outptr_ <%- call.resultDatatype.prefix %><%- call.resultDatatype.name %>** result,
    _Out_opt_ size_t* bufferUsed
) noexcept
{
    RETURN_HR_INVALIDARG_IF_NULL(result);

    RETURN_IF_FAILED(XAsyncGetResult(async, nullptr, bufferSize, buffer, bufferUsed));
    *result = static_cast<<%- call.resultDatatype.prefix %><%- call.resultDatatype.name %>*>(buffer);

    return S_OK;
}
<%  } // end if

    if (call.entityReturned === "TitlePlayer") { %>
PF_API <%- prefix %>Re<%- call.name %>Async(
    _In_ PFTitlePlayerHandle titlePlayerHandle,
    <%- requestParam %>_Inout_ XAsyncBlock* async
) noexcept
{
    RETURN_HR_INVALIDARG_IF_NULL(titlePlayerHandle);
    RETURN_HR_INVALIDARG_IF_NULL(request);

    SharedPtr<GlobalState> state{ nullptr };
    RETURN_IF_FAILED(GlobalState::Get(state));

    SharedPtr<TitlePlayer> titlePlayer;
    RETURN_IF_FAILED(state->TitlePlayers().FromHandle(titlePlayerHandle, titlePlayer));

    auto provider = MakeProvider(state->RunContext().DeriveOnQueue(async->queue), async, __FUNCTION__, std::bind(&<%- featureGroup.name %>API::Re<%- call.name %>, std::move(titlePlayer), *request, std::placeholders::_1));
    return XAsyncProviderBase::Run(std::move(provider));
}
<% } // end if
} // end for %>
